/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnswerOptionService } from "../answerOption.service";
import { AnswerOptionCreateInput } from "./AnswerOptionCreateInput";
import { AnswerOption } from "./AnswerOption";
import { AnswerOptionFindManyArgs } from "./AnswerOptionFindManyArgs";
import { AnswerOptionWhereUniqueInput } from "./AnswerOptionWhereUniqueInput";
import { AnswerOptionUpdateInput } from "./AnswerOptionUpdateInput";

export class AnswerOptionControllerBase {
  constructor(protected readonly service: AnswerOptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnswerOption })
  async createAnswerOption(
    @common.Body() data: AnswerOptionCreateInput
  ): Promise<AnswerOption> {
    return await this.service.createAnswerOption({
      data: {
        ...data,

        mcq: data.mcq
          ? {
              connect: data.mcq,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        isCorrect: true,

        mcq: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnswerOption] })
  @ApiNestedQuery(AnswerOptionFindManyArgs)
  async answerOptions(@common.Req() request: Request): Promise<AnswerOption[]> {
    const args = plainToClass(AnswerOptionFindManyArgs, request.query);
    return this.service.answerOptions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isCorrect: true,

        mcq: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnswerOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async answerOption(
    @common.Param() params: AnswerOptionWhereUniqueInput
  ): Promise<AnswerOption | null> {
    const result = await this.service.answerOption({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isCorrect: true,

        mcq: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnswerOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnswerOption(
    @common.Param() params: AnswerOptionWhereUniqueInput,
    @common.Body() data: AnswerOptionUpdateInput
  ): Promise<AnswerOption | null> {
    try {
      return await this.service.updateAnswerOption({
        where: params,
        data: {
          ...data,

          mcq: data.mcq
            ? {
                connect: data.mcq,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          isCorrect: true,

          mcq: {
            select: {
              id: true,
            },
          },

          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnswerOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnswerOption(
    @common.Param() params: AnswerOptionWhereUniqueInput
  ): Promise<AnswerOption | null> {
    try {
      return await this.service.deleteAnswerOption({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isCorrect: true,

          mcq: {
            select: {
              id: true,
            },
          },

          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
