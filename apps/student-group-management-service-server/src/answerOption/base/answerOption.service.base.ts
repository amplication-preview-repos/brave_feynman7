/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnswerOption as PrismaAnswerOption,
  Mcq as PrismaMcq,
} from "@prisma/client";

export class AnswerOptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnswerOptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.answerOption.count(args);
  }

  async answerOptions(
    args: Prisma.AnswerOptionFindManyArgs
  ): Promise<PrismaAnswerOption[]> {
    return this.prisma.answerOption.findMany(args);
  }
  async answerOption(
    args: Prisma.AnswerOptionFindUniqueArgs
  ): Promise<PrismaAnswerOption | null> {
    return this.prisma.answerOption.findUnique(args);
  }
  async createAnswerOption(
    args: Prisma.AnswerOptionCreateArgs
  ): Promise<PrismaAnswerOption> {
    return this.prisma.answerOption.create(args);
  }
  async updateAnswerOption(
    args: Prisma.AnswerOptionUpdateArgs
  ): Promise<PrismaAnswerOption> {
    return this.prisma.answerOption.update(args);
  }
  async deleteAnswerOption(
    args: Prisma.AnswerOptionDeleteArgs
  ): Promise<PrismaAnswerOption> {
    return this.prisma.answerOption.delete(args);
  }

  async getMcq(parentId: string): Promise<PrismaMcq | null> {
    return this.prisma.answerOption
      .findUnique({
        where: { id: parentId },
      })
      .mcq();
  }
}
