/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentService } from "../student.service";
import { StudentCreateInput } from "./StudentCreateInput";
import { Student } from "./Student";
import { StudentFindManyArgs } from "./StudentFindManyArgs";
import { StudentWhereUniqueInput } from "./StudentWhereUniqueInput";
import { StudentUpdateInput } from "./StudentUpdateInput";
import { GroupMembershipFindManyArgs } from "../../groupMembership/base/GroupMembershipFindManyArgs";
import { GroupMembership } from "../../groupMembership/base/GroupMembership";
import { GroupMembershipWhereUniqueInput } from "../../groupMembership/base/GroupMembershipWhereUniqueInput";
import { StudentAnswerFindManyArgs } from "../../studentAnswer/base/StudentAnswerFindManyArgs";
import { StudentAnswer } from "../../studentAnswer/base/StudentAnswer";
import { StudentAnswerWhereUniqueInput } from "../../studentAnswer/base/StudentAnswerWhereUniqueInput";

export class StudentControllerBase {
  constructor(protected readonly service: StudentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Student })
  async createStudent(
    @common.Body() data: StudentCreateInput
  ): Promise<Student> {
    return await this.service.createStudent({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Student] })
  @ApiNestedQuery(StudentFindManyArgs)
  async students(@common.Req() request: Request): Promise<Student[]> {
    const args = plainToClass(StudentFindManyArgs, request.query);
    return this.service.students({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async student(
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Student | null> {
    const result = await this.service.student({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudent(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() data: StudentUpdateInput
  ): Promise<Student | null> {
    try {
      return await this.service.updateStudent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudent(
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Student | null> {
    try {
      return await this.service.deleteStudent({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/groupMemberships")
  @ApiNestedQuery(GroupMembershipFindManyArgs)
  async findGroupMemberships(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<GroupMembership[]> {
    const query = plainToClass(GroupMembershipFindManyArgs, request.query);
    const results = await this.service.findGroupMemberships(params.id, {
      ...query,
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/groupMemberships")
  async connectGroupMemberships(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: GroupMembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMemberships: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/groupMemberships")
  async updateGroupMemberships(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: GroupMembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMemberships: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/groupMemberships")
  async disconnectGroupMemberships(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: GroupMembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMemberships: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentAnswers")
  @ApiNestedQuery(StudentAnswerFindManyArgs)
  async findStudentAnswers(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<StudentAnswer[]> {
    const query = plainToClass(StudentAnswerFindManyArgs, request.query);
    const results = await this.service.findStudentAnswers(params.id, {
      ...query,
      select: {
        answerDate: true,
        createdAt: true,
        id: true,

        mcq: {
          select: {
            id: true,
          },
        },

        selectedOption: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentAnswers")
  async connectStudentAnswers(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: StudentAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAnswers: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentAnswers")
  async updateStudentAnswers(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: StudentAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAnswers: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentAnswers")
  async disconnectStudentAnswers(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: StudentAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAnswers: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
