/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupMembershipService } from "../groupMembership.service";
import { GroupMembershipCreateInput } from "./GroupMembershipCreateInput";
import { GroupMembership } from "./GroupMembership";
import { GroupMembershipFindManyArgs } from "./GroupMembershipFindManyArgs";
import { GroupMembershipWhereUniqueInput } from "./GroupMembershipWhereUniqueInput";
import { GroupMembershipUpdateInput } from "./GroupMembershipUpdateInput";

export class GroupMembershipControllerBase {
  constructor(protected readonly service: GroupMembershipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GroupMembership })
  async createGroupMembership(
    @common.Body() data: GroupMembershipCreateInput
  ): Promise<GroupMembership> {
    return await this.service.createGroupMembership({
      data: {
        ...data,

        group: data.group
          ? {
              connect: data.group,
            }
          : undefined,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GroupMembership] })
  @ApiNestedQuery(GroupMembershipFindManyArgs)
  async groupMemberships(
    @common.Req() request: Request
  ): Promise<GroupMembership[]> {
    const args = plainToClass(GroupMembershipFindManyArgs, request.query);
    return this.service.groupMemberships({
      ...args,
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GroupMembership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async groupMembership(
    @common.Param() params: GroupMembershipWhereUniqueInput
  ): Promise<GroupMembership | null> {
    const result = await this.service.groupMembership({
      where: params,
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GroupMembership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroupMembership(
    @common.Param() params: GroupMembershipWhereUniqueInput,
    @common.Body() data: GroupMembershipUpdateInput
  ): Promise<GroupMembership | null> {
    try {
      return await this.service.updateGroupMembership({
        where: params,
        data: {
          ...data,

          group: data.group
            ? {
                connect: data.group,
              }
            : undefined,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          group: {
            select: {
              id: true,
            },
          },

          id: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GroupMembership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroupMembership(
    @common.Param() params: GroupMembershipWhereUniqueInput
  ): Promise<GroupMembership | null> {
    try {
      return await this.service.deleteGroupMembership({
        where: params,
        select: {
          createdAt: true,

          group: {
            select: {
              id: true,
            },
          },

          id: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
