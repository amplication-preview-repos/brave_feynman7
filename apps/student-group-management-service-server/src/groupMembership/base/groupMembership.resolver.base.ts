/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GroupMembership } from "./GroupMembership";
import { GroupMembershipCountArgs } from "./GroupMembershipCountArgs";
import { GroupMembershipFindManyArgs } from "./GroupMembershipFindManyArgs";
import { GroupMembershipFindUniqueArgs } from "./GroupMembershipFindUniqueArgs";
import { CreateGroupMembershipArgs } from "./CreateGroupMembershipArgs";
import { UpdateGroupMembershipArgs } from "./UpdateGroupMembershipArgs";
import { DeleteGroupMembershipArgs } from "./DeleteGroupMembershipArgs";
import { Group } from "../../group/base/Group";
import { Student } from "../../student/base/Student";
import { GroupMembershipService } from "../groupMembership.service";
@graphql.Resolver(() => GroupMembership)
export class GroupMembershipResolverBase {
  constructor(protected readonly service: GroupMembershipService) {}

  async _groupMembershipsMeta(
    @graphql.Args() args: GroupMembershipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GroupMembership])
  async groupMemberships(
    @graphql.Args() args: GroupMembershipFindManyArgs
  ): Promise<GroupMembership[]> {
    return this.service.groupMemberships(args);
  }

  @graphql.Query(() => GroupMembership, { nullable: true })
  async groupMembership(
    @graphql.Args() args: GroupMembershipFindUniqueArgs
  ): Promise<GroupMembership | null> {
    const result = await this.service.groupMembership(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GroupMembership)
  async createGroupMembership(
    @graphql.Args() args: CreateGroupMembershipArgs
  ): Promise<GroupMembership> {
    return await this.service.createGroupMembership({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GroupMembership)
  async updateGroupMembership(
    @graphql.Args() args: UpdateGroupMembershipArgs
  ): Promise<GroupMembership | null> {
    try {
      return await this.service.updateGroupMembership({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupMembership)
  async deleteGroupMembership(
    @graphql.Args() args: DeleteGroupMembershipArgs
  ): Promise<GroupMembership | null> {
    try {
      return await this.service.deleteGroupMembership(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  async getGroup(
    @graphql.Parent() parent: GroupMembership
  ): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  async getStudent(
    @graphql.Parent() parent: GroupMembership
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
