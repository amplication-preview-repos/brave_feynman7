/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  GroupMembership as PrismaGroupMembership,
  Group as PrismaGroup,
  Student as PrismaStudent,
} from "@prisma/client";

export class GroupMembershipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GroupMembershipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.groupMembership.count(args);
  }

  async groupMemberships(
    args: Prisma.GroupMembershipFindManyArgs
  ): Promise<PrismaGroupMembership[]> {
    return this.prisma.groupMembership.findMany(args);
  }
  async groupMembership(
    args: Prisma.GroupMembershipFindUniqueArgs
  ): Promise<PrismaGroupMembership | null> {
    return this.prisma.groupMembership.findUnique(args);
  }
  async createGroupMembership(
    args: Prisma.GroupMembershipCreateArgs
  ): Promise<PrismaGroupMembership> {
    return this.prisma.groupMembership.create(args);
  }
  async updateGroupMembership(
    args: Prisma.GroupMembershipUpdateArgs
  ): Promise<PrismaGroupMembership> {
    return this.prisma.groupMembership.update(args);
  }
  async deleteGroupMembership(
    args: Prisma.GroupMembershipDeleteArgs
  ): Promise<PrismaGroupMembership> {
    return this.prisma.groupMembership.delete(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.groupMembership
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.groupMembership
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
