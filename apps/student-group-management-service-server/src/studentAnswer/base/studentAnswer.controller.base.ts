/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentAnswerService } from "../studentAnswer.service";
import { StudentAnswerCreateInput } from "./StudentAnswerCreateInput";
import { StudentAnswer } from "./StudentAnswer";
import { StudentAnswerFindManyArgs } from "./StudentAnswerFindManyArgs";
import { StudentAnswerWhereUniqueInput } from "./StudentAnswerWhereUniqueInput";
import { StudentAnswerUpdateInput } from "./StudentAnswerUpdateInput";

export class StudentAnswerControllerBase {
  constructor(protected readonly service: StudentAnswerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentAnswer })
  async createStudentAnswer(
    @common.Body() data: StudentAnswerCreateInput
  ): Promise<StudentAnswer> {
    return await this.service.createStudentAnswer({
      data: {
        ...data,

        mcq: data.mcq
          ? {
              connect: data.mcq,
            }
          : undefined,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        answerDate: true,
        createdAt: true,
        id: true,

        mcq: {
          select: {
            id: true,
          },
        },

        selectedOption: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentAnswer] })
  @ApiNestedQuery(StudentAnswerFindManyArgs)
  async studentAnswers(
    @common.Req() request: Request
  ): Promise<StudentAnswer[]> {
    const args = plainToClass(StudentAnswerFindManyArgs, request.query);
    return this.service.studentAnswers({
      ...args,
      select: {
        answerDate: true,
        createdAt: true,
        id: true,

        mcq: {
          select: {
            id: true,
          },
        },

        selectedOption: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentAnswer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentAnswer(
    @common.Param() params: StudentAnswerWhereUniqueInput
  ): Promise<StudentAnswer | null> {
    const result = await this.service.studentAnswer({
      where: params,
      select: {
        answerDate: true,
        createdAt: true,
        id: true,

        mcq: {
          select: {
            id: true,
          },
        },

        selectedOption: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentAnswer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentAnswer(
    @common.Param() params: StudentAnswerWhereUniqueInput,
    @common.Body() data: StudentAnswerUpdateInput
  ): Promise<StudentAnswer | null> {
    try {
      return await this.service.updateStudentAnswer({
        where: params,
        data: {
          ...data,

          mcq: data.mcq
            ? {
                connect: data.mcq,
              }
            : undefined,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          answerDate: true,
          createdAt: true,
          id: true,

          mcq: {
            select: {
              id: true,
            },
          },

          selectedOption: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentAnswer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentAnswer(
    @common.Param() params: StudentAnswerWhereUniqueInput
  ): Promise<StudentAnswer | null> {
    try {
      return await this.service.deleteStudentAnswer({
        where: params,
        select: {
          answerDate: true,
          createdAt: true,
          id: true,

          mcq: {
            select: {
              id: true,
            },
          },

          selectedOption: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
