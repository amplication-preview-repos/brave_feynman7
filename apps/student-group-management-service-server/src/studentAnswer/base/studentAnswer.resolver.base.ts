/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentAnswer } from "./StudentAnswer";
import { StudentAnswerCountArgs } from "./StudentAnswerCountArgs";
import { StudentAnswerFindManyArgs } from "./StudentAnswerFindManyArgs";
import { StudentAnswerFindUniqueArgs } from "./StudentAnswerFindUniqueArgs";
import { CreateStudentAnswerArgs } from "./CreateStudentAnswerArgs";
import { UpdateStudentAnswerArgs } from "./UpdateStudentAnswerArgs";
import { DeleteStudentAnswerArgs } from "./DeleteStudentAnswerArgs";
import { Mcq } from "../../mcq/base/Mcq";
import { Student } from "../../student/base/Student";
import { StudentAnswerService } from "../studentAnswer.service";
@graphql.Resolver(() => StudentAnswer)
export class StudentAnswerResolverBase {
  constructor(protected readonly service: StudentAnswerService) {}

  async _studentAnswersMeta(
    @graphql.Args() args: StudentAnswerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentAnswer])
  async studentAnswers(
    @graphql.Args() args: StudentAnswerFindManyArgs
  ): Promise<StudentAnswer[]> {
    return this.service.studentAnswers(args);
  }

  @graphql.Query(() => StudentAnswer, { nullable: true })
  async studentAnswer(
    @graphql.Args() args: StudentAnswerFindUniqueArgs
  ): Promise<StudentAnswer | null> {
    const result = await this.service.studentAnswer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentAnswer)
  async createStudentAnswer(
    @graphql.Args() args: CreateStudentAnswerArgs
  ): Promise<StudentAnswer> {
    return await this.service.createStudentAnswer({
      ...args,
      data: {
        ...args.data,

        mcq: args.data.mcq
          ? {
              connect: args.data.mcq,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => StudentAnswer)
  async updateStudentAnswer(
    @graphql.Args() args: UpdateStudentAnswerArgs
  ): Promise<StudentAnswer | null> {
    try {
      return await this.service.updateStudentAnswer({
        ...args,
        data: {
          ...args.data,

          mcq: args.data.mcq
            ? {
                connect: args.data.mcq,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentAnswer)
  async deleteStudentAnswer(
    @graphql.Args() args: DeleteStudentAnswerArgs
  ): Promise<StudentAnswer | null> {
    try {
      return await this.service.deleteStudentAnswer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Mcq, {
    nullable: true,
    name: "mcq",
  })
  async getMcq(@graphql.Parent() parent: StudentAnswer): Promise<Mcq | null> {
    const result = await this.service.getMcq(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  async getStudent(
    @graphql.Parent() parent: StudentAnswer
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
