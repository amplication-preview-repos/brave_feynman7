/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentAnswer as PrismaStudentAnswer,
  Mcq as PrismaMcq,
  Student as PrismaStudent,
} from "@prisma/client";

export class StudentAnswerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentAnswerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentAnswer.count(args);
  }

  async studentAnswers(
    args: Prisma.StudentAnswerFindManyArgs
  ): Promise<PrismaStudentAnswer[]> {
    return this.prisma.studentAnswer.findMany(args);
  }
  async studentAnswer(
    args: Prisma.StudentAnswerFindUniqueArgs
  ): Promise<PrismaStudentAnswer | null> {
    return this.prisma.studentAnswer.findUnique(args);
  }
  async createStudentAnswer(
    args: Prisma.StudentAnswerCreateArgs
  ): Promise<PrismaStudentAnswer> {
    return this.prisma.studentAnswer.create(args);
  }
  async updateStudentAnswer(
    args: Prisma.StudentAnswerUpdateArgs
  ): Promise<PrismaStudentAnswer> {
    return this.prisma.studentAnswer.update(args);
  }
  async deleteStudentAnswer(
    args: Prisma.StudentAnswerDeleteArgs
  ): Promise<PrismaStudentAnswer> {
    return this.prisma.studentAnswer.delete(args);
  }

  async getMcq(parentId: string): Promise<PrismaMcq | null> {
    return this.prisma.studentAnswer
      .findUnique({
        where: { id: parentId },
      })
      .mcq();
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.studentAnswer
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
