/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { McqService } from "../mcq.service";
import { McqCreateInput } from "./McqCreateInput";
import { Mcq } from "./Mcq";
import { McqFindManyArgs } from "./McqFindManyArgs";
import { McqWhereUniqueInput } from "./McqWhereUniqueInput";
import { McqUpdateInput } from "./McqUpdateInput";
import { AnswerOptionFindManyArgs } from "../../answerOption/base/AnswerOptionFindManyArgs";
import { AnswerOption } from "../../answerOption/base/AnswerOption";
import { AnswerOptionWhereUniqueInput } from "../../answerOption/base/AnswerOptionWhereUniqueInput";
import { StudentAnswerFindManyArgs } from "../../studentAnswer/base/StudentAnswerFindManyArgs";
import { StudentAnswer } from "../../studentAnswer/base/StudentAnswer";
import { StudentAnswerWhereUniqueInput } from "../../studentAnswer/base/StudentAnswerWhereUniqueInput";

export class McqControllerBase {
  constructor(protected readonly service: McqService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mcq })
  async createMcq(@common.Body() data: McqCreateInput): Promise<Mcq> {
    return await this.service.createMcq({
      data: {
        ...data,

        course: data.course
          ? {
              connect: data.course,
            }
          : undefined,
      },
      select: {
        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        question: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mcq] })
  @ApiNestedQuery(McqFindManyArgs)
  async mcqs(@common.Req() request: Request): Promise<Mcq[]> {
    const args = plainToClass(McqFindManyArgs, request.query);
    return this.service.mcqs({
      ...args,
      select: {
        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        question: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mcq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mcq(@common.Param() params: McqWhereUniqueInput): Promise<Mcq | null> {
    const result = await this.service.mcq({
      where: params,
      select: {
        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        question: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mcq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMcq(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() data: McqUpdateInput
  ): Promise<Mcq | null> {
    try {
      return await this.service.updateMcq({
        where: params,
        data: {
          ...data,

          course: data.course
            ? {
                connect: data.course,
              }
            : undefined,
        },
        select: {
          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          question: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mcq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMcq(
    @common.Param() params: McqWhereUniqueInput
  ): Promise<Mcq | null> {
    try {
      return await this.service.deleteMcq({
        where: params,
        select: {
          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          question: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/answerOptions")
  @ApiNestedQuery(AnswerOptionFindManyArgs)
  async findAnswerOptions(
    @common.Req() request: Request,
    @common.Param() params: McqWhereUniqueInput
  ): Promise<AnswerOption[]> {
    const query = plainToClass(AnswerOptionFindManyArgs, request.query);
    const results = await this.service.findAnswerOptions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isCorrect: true,

        mcq: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/answerOptions")
  async connectAnswerOptions(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() body: AnswerOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      answerOptions: {
        connect: body,
      },
    };
    await this.service.updateMcq({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/answerOptions")
  async updateAnswerOptions(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() body: AnswerOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      answerOptions: {
        set: body,
      },
    };
    await this.service.updateMcq({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/answerOptions")
  async disconnectAnswerOptions(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() body: AnswerOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      answerOptions: {
        disconnect: body,
      },
    };
    await this.service.updateMcq({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentAnswers")
  @ApiNestedQuery(StudentAnswerFindManyArgs)
  async findStudentAnswers(
    @common.Req() request: Request,
    @common.Param() params: McqWhereUniqueInput
  ): Promise<StudentAnswer[]> {
    const query = plainToClass(StudentAnswerFindManyArgs, request.query);
    const results = await this.service.findStudentAnswers(params.id, {
      ...query,
      select: {
        answerDate: true,
        createdAt: true,
        id: true,

        mcq: {
          select: {
            id: true,
          },
        },

        selectedOption: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentAnswers")
  async connectStudentAnswers(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() body: StudentAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAnswers: {
        connect: body,
      },
    };
    await this.service.updateMcq({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentAnswers")
  async updateStudentAnswers(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() body: StudentAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAnswers: {
        set: body,
      },
    };
    await this.service.updateMcq({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentAnswers")
  async disconnectStudentAnswers(
    @common.Param() params: McqWhereUniqueInput,
    @common.Body() body: StudentAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAnswers: {
        disconnect: body,
      },
    };
    await this.service.updateMcq({
      where: params,
      data,
      select: { id: true },
    });
  }
}
