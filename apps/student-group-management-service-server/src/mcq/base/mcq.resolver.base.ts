/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mcq } from "./Mcq";
import { McqCountArgs } from "./McqCountArgs";
import { McqFindManyArgs } from "./McqFindManyArgs";
import { McqFindUniqueArgs } from "./McqFindUniqueArgs";
import { CreateMcqArgs } from "./CreateMcqArgs";
import { UpdateMcqArgs } from "./UpdateMcqArgs";
import { DeleteMcqArgs } from "./DeleteMcqArgs";
import { AnswerOptionFindManyArgs } from "../../answerOption/base/AnswerOptionFindManyArgs";
import { AnswerOption } from "../../answerOption/base/AnswerOption";
import { StudentAnswerFindManyArgs } from "../../studentAnswer/base/StudentAnswerFindManyArgs";
import { StudentAnswer } from "../../studentAnswer/base/StudentAnswer";
import { Course } from "../../course/base/Course";
import { McqService } from "../mcq.service";
@graphql.Resolver(() => Mcq)
export class McqResolverBase {
  constructor(protected readonly service: McqService) {}

  async _mcqsMeta(
    @graphql.Args() args: McqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mcq])
  async mcqs(@graphql.Args() args: McqFindManyArgs): Promise<Mcq[]> {
    return this.service.mcqs(args);
  }

  @graphql.Query(() => Mcq, { nullable: true })
  async mcq(@graphql.Args() args: McqFindUniqueArgs): Promise<Mcq | null> {
    const result = await this.service.mcq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mcq)
  async createMcq(@graphql.Args() args: CreateMcqArgs): Promise<Mcq> {
    return await this.service.createMcq({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Mcq)
  async updateMcq(@graphql.Args() args: UpdateMcqArgs): Promise<Mcq | null> {
    try {
      return await this.service.updateMcq({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mcq)
  async deleteMcq(@graphql.Args() args: DeleteMcqArgs): Promise<Mcq | null> {
    try {
      return await this.service.deleteMcq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AnswerOption], { name: "answerOptions" })
  async findAnswerOptions(
    @graphql.Parent() parent: Mcq,
    @graphql.Args() args: AnswerOptionFindManyArgs
  ): Promise<AnswerOption[]> {
    const results = await this.service.findAnswerOptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentAnswer], { name: "studentAnswers" })
  async findStudentAnswers(
    @graphql.Parent() parent: Mcq,
    @graphql.Args() args: StudentAnswerFindManyArgs
  ): Promise<StudentAnswer[]> {
    const results = await this.service.findStudentAnswers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  async getCourse(@graphql.Parent() parent: Mcq): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
